// Generated by cpp11: do not edit by hand
// clang-format off


#include "cpp11/declarations.hpp"
#include <R_ext/Visibility.h>

// flotsam.cpp
integers sparse_idxs(const integers& is, const integers& ps, const integers& ns);
extern "C" SEXP _flotsam_sparse_idxs(SEXP is, SEXP ps, SEXP ns) {
  BEGIN_CPP11
    return cpp11::as_sexp(sparse_idxs(cpp11::as_cpp<cpp11::decay_t<const integers&>>(is), cpp11::as_cpp<cpp11::decay_t<const integers&>>(ps), cpp11::as_cpp<cpp11::decay_t<const integers&>>(ns)));
  END_CPP11
}
// flotsam.cpp
doubles   spm_times_scalar(const integers& ps, const doubles& xs, const doubles& ds);
extern "C" SEXP _flotsam_spm_times_scalar(SEXP ps, SEXP xs, SEXP ds) {
  BEGIN_CPP11
    return cpp11::as_sexp(spm_times_scalar(cpp11::as_cpp<cpp11::decay_t<const integers&>>(ps), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(xs), cpp11::as_cpp<cpp11::decay_t<const doubles&>>(ds)));
  END_CPP11
}
// flotsam.cpp
list nbrhood_triplets(const integers& nnt, std::size_t n_nbrs);
extern "C" SEXP _flotsam_nbrhood_triplets(SEXP nnt, SEXP n_nbrs) {
  BEGIN_CPP11
    return cpp11::as_sexp(nbrhood_triplets(cpp11::as_cpp<cpp11::decay_t<const integers&>>(nnt), cpp11::as_cpp<cpp11::decay_t<std::size_t>>(n_nbrs)));
  END_CPP11
}

extern "C" {
static const R_CallMethodDef CallEntries[] = {
    {"_flotsam_nbrhood_triplets", (DL_FUNC) &_flotsam_nbrhood_triplets, 2},
    {"_flotsam_sparse_idxs",      (DL_FUNC) &_flotsam_sparse_idxs,      3},
    {"_flotsam_spm_times_scalar", (DL_FUNC) &_flotsam_spm_times_scalar, 3},
    {NULL, NULL, 0}
};
}

extern "C" attribute_visible void R_init_flotsam(DllInfo* dll){
  R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
  R_useDynamicSymbols(dll, FALSE);
  R_forceSymbols(dll, TRUE);
}
